// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");

function write_(idx, text, preserve, t) {
  var initialText = preserve ? t[/* el */2].textContent : "";
  return new Promise((function (resolve, param) {
                var writeRec = function (idx, text, t) {
                  return setTimeout((function (param) {
                                if (idx <= text.length) {
                                  t[/* el */2].textContent = initialText + $$String.sub(text, 0, idx);
                                  writeRec(idx + 1 | 0, text, t);
                                  return /* () */0;
                                } else {
                                  console.log("Next");
                                  console.log(t[/* text */3]);
                                  var match = t[/* text */3];
                                  if (match) {
                                    var head = match[0];
                                    console.log("writing next string", head, List.length(match[1]));
                                    return resolve(/* Text */[head]);
                                  } else {
                                    console.log("empty array");
                                    return resolve(/* Done */1);
                                  }
                                }
                              }), t[/* timeout */1]);
                };
                console.log("__writing__", text);
                writeRec(idx, text, t);
                return /* () */0;
              }));
}

function make(el) {
  return /* record */[
          /* timeoutId */undefined,
          /* timeout */30,
          /* el */el,
          /* text : [] */0,
          /* current */Promise.resolve(/* Init */0)
        ];
}

function write(text, $staropt$star, t) {
  var preserve = $staropt$star !== undefined ? $staropt$star : false;
  var t$prime_000 = /* timeoutId */t[/* timeoutId */0];
  var t$prime_001 = /* timeout */t[/* timeout */1];
  var t$prime_002 = /* el */t[/* el */2];
  var t$prime_003 = /* text : :: */[
    text,
    t[/* text */3]
  ];
  var t$prime_004 = /* current */t[/* current */4];
  var t$prime = /* record */[
    t$prime_000,
    t$prime_001,
    t$prime_002,
    t$prime_003,
    t$prime_004
  ];
  var current = t[/* current */4].then((function (o) {
          if (typeof o === "number") {
            if (o !== 0) {
              console.log("??????");
              return Promise.resolve(/* Done */1);
            } else {
              return write_(0, text, preserve, t$prime);
            }
          } else {
            return write_(0, text + " ", preserve, t$prime);
          }
        }));
  return /* record */[
          t$prime_000,
          t$prime_001,
          t$prime_002,
          t$prime_003,
          /* current */current
        ];
}

function wait(ms, t) {
  var current = t[/* current */4].then((function (o) {
          var ms$1 = ms;
          var op = o;
          return new Promise((function (resolve, param) {
                        console.log("waiting...");
                        setTimeout((function (param) {
                                return resolve(op);
                              }), ms$1);
                        return /* () */0;
                      }));
        }));
  return /* record */[
          /* timeoutId */t[/* timeoutId */0],
          /* timeout */t[/* timeout */1],
          /* el */t[/* el */2],
          /* text */t[/* text */3],
          /* current */current
        ];
}

function waitForPromise(promise, t) {
  var current = t[/* current */4].then((function (param) {
            return promise;
          })).then((function (param) {
          return t[/* current */4];
        }));
  return /* record */[
          /* timeoutId */t[/* timeoutId */0],
          /* timeout */t[/* timeout */1],
          /* el */t[/* el */2],
          /* text */t[/* text */3],
          /* current */current
        ];
}

exports.make = make;
exports.wait = wait;
exports.waitForPromise = waitForPromise;
exports.write = write;
/* No side effect */
